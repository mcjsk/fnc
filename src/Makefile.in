all:
include ../subdir-inc.make
#$(error $(TOP_SRCDIR))
#EXTRA_LIBS := -lz

THE_OBJ := libfossil.o
ifneq (,$(wildcard sqlite3.c))
  HAVE_OWN_SQLITE := 1
  CPPFLAGS += -DSQLITE_CORE
  THE_OBJ += sqlite3.o
else
  HAVE_OWN_SQLITE := 0
endif
CLEAN_FILES += $(THE_OBJ)

# These are the flags used by fossil's embedded sqlite3:
sqlite3.o: CPPFLAGS+=-DNDEBUG=1 \
                 -DSQLITE_DQS=0 \
                 -DSQLITE_THREADSAFE=0 \
                 -DSQLITE_DEFAULT_MEMSTATUS=0 \
                 -DSQLITE_DEFAULT_WAL_SYNCHRONOUS=1 \
                 -DSQLITE_LIKE_DOESNT_MATCH_BLOBS \
                 -DSQLITE_OMIT_DECLTYPE \
                 -DSQLITE_OMIT_PROGRESS_CALLBACK \
                 -DSQLITE_OMIT_SHARED_CACHE \
                 -DSQLITE_OMIT_LOAD_EXTENSION \
                 -DSQLITE_MAX_EXPR_DEPTH=0 \
                 -DSQLITE_USE_ALLOCA \
                 -DSQLITE_ENABLE_LOCKING_STYLE=0 \
                 -DSQLITE_DEFAULT_FILE_FORMAT=4 \
                 -DSQLITE_ENABLE_EXPLAIN_COMMENTS \
                 -DSQLITE_ENABLE_FTS4 \
                 -DSQLITE_ENABLE_DBSTAT_VTAB \
                 -DSQLITE_ENABLE_JSON1 \
                 -DSQLITE_ENABLE_FTS5 \
                 -DSQLITE_ENABLE_STMTVTAB \
                 -DSQLITE_HAVE_ZLIB \
                 -DSQLITE_INTROSPECTION_PRAGMAS \
                 -DSQLITE_ENABLE_DBPAGE_VTAB \
                 -DSQLITE_TRUSTED_SCHEMA=0

# FIXME: update libf sql tracing: -DSQLITE_OMIT_DEPRECATED

sqlite3.o: CFLAGS+=-Wno-sign-compare
ifneq (,$(filter clang,$(CC)))
# Workaround for clang
sqlite3.o: CFLAGS+=-Wno-unused-const-variable
endif

all: $(THE_OBJ)
